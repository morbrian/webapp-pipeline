apiVersion: v1
kind: Template
metadata:
  name: jdbcquery-backend-pipeline
objects:
- apiVersion: v1
  kind: ImageStream
  metadata:
    labels:
      app: ${APP_ID}
    name: ${APP_ID}
  spec: {}
  status:
    dockerImageRepository: ""
- apiVersion: v1
  kind: ImageStream
  metadata:
    labels:
      app: ${APP_ID}-platform
    name: ${APP_ID}-platform
  spec: {}
  status:
    dockerImageRepository: ""
- apiVersion: v1
  kind: ImageStream
  metadata:
    name: webserver31-tomcat8
  spec:
    tags:
    - annotations:
        supports: tomcat:8.x,java
        tags: builder,tomcat,java
        version: "3.1"
      from:
        kind: DockerImage
        name: registry.access.redhat.com/jboss-webserver-3/webserver31-tomcat8-openshift
      name: "3.1"
    - annotations:
        supports: java
        tags: builder,tomcat,java
      from:
        kind: ImageStreamTag
        name: "3.1"
      name: latest
- apiVersion: v1
  kind: BuildConfig
  metadata:
    annotations:
      pipeline.alpha.openshift.io/uses: '[{"name": "${NAME}", "namespace": "", "kind": "DeploymentConfig"}]'
    creationTimestamp: null
    labels:
      name: ${APP_ID}
    name: ${APP_ID}
  spec:
    strategy:
      jenkinsPipelineStrategy:
        jenkinsfile: |-
          try {
             timeout(time: 20, unit: 'MINUTES') {
                def appName="${APP_ID}"
                def project=""

                node {
                  stage("Initialize") {
                    project = env.PROJECT_NAME
                  }
                }

                node {
                  stage("Build Platform Image") {
                    sh "oc start-build ${appName}-platform -n ${project}"
                    openshiftVerifyBuild bldCfg: "${appName}-platform", namespace: project, waitTime: '20', waitUnit: 'min'
                  }
                }

                node("maven") {
                  stage("Checkout") {
                    git url: "${GIT_SOURCE_URL}", branch: "${GIT_SOURCE_REF}"
                  }

                  stage("Build WAR") {
                    sh "mvn clean package -Popenshift"
                    dir('target') {
                      stash name:"war", includes:"${ARTIFACT_NAME}.war"
                    }
                  }
                }

                node {
                  stage("Build Final Image") {
                    unstash name:"war"
                    sh "oc start-build ${appName}-docker --from-file=${ARTIFACT_NAME}.war -n ${project}"
                    openshiftVerifyBuild bldCfg: "${appName}-docker", namespace: project, waitTime: '20', waitUnit: 'min'
                  }

                  stage("Deploy") {
                    openshiftDeploy deploymentConfig: appName, namespace: project
                  }
                }
             }
          } catch (err) {
             echo "in catch block"
             echo "Caught: ${err}"
             currentBuild.result = 'FAILURE'
             throw err
          }
      type: JenkinsPipeline
    triggers:
    - github:
        secret: "${GITHUB_WEBHOOK_SECRET}"
      type: GitHub
    - generic:
        secret: "${GENERIC_WEBHOOK_SECRET}"
      type: Generic
- apiVersion: v1
  kind: BuildConfig
  metadata:
    labels:
      app: ${APP_ID}-platform
    name: ${APP_ID}-platform
  spec:
    output:
      to:
        kind: ImageStreamTag
        name: ${APP_ID}-platform:latest
    postCommit: {}
    resources: {}
    runPolicy: Serial
    source:
      type: Git
      contextDir: src/main/docker
      git:
        uri: ${GIT_SOURCE_URL}
        ref: ${GIT_SOURCE_REF}
    strategy:
      dockerStrategy:
        from:
          kind: ImageStreamTag
          name: webserver31-tomcat8:latest
      type: Docker
    triggers: {}
- apiVersion: v1
  kind: BuildConfig
  metadata:
    labels:
      app: ${APP_ID}-docker
    name: ${APP_ID}-docker
  spec:
    output:
      to:
        kind: ImageStreamTag
        name: ${APP_ID}:latest
    postCommit: {}
    resources: {}
    runPolicy: Serial
    source:
      dockerfile: |-
        FROM ${APP_ID}-platform
        COPY ${ARTIFACT_NAME}.war /opt/webserver/webapps/ROOT.war
        USER root
        RUN chmod -R 770 /opt/webserver/conf/Catalina/localhost
        USER jboss
        CMD /opt/webserver/bin/launch.sh
      binary:
        asFile: ROOT.war
      type: Docker
    strategy:
      dockerStrategy:
        from:
          kind: ImageStreamTag
          name: ${APP_ID}-platform:latest
      type: Docker
    triggers: {}
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    labels:
      app: ${APP_ID}
    name: ${APP_ID}
  spec:
    replicas: 1
    selector:
      app: ${APP_ID}
      deploymentconfig: ${APP_ID}
    strategy:
      rollingParams:
        intervalSeconds: 1
        maxSurge: 25%
        maxUnavailable: 25%
        timeoutSeconds: 600
        updatePeriodSeconds: 1
      type: Rolling
    template:
      metadata:
        labels:
          app: ${APP_ID}
          deploymentconfig: ${APP_ID}
      spec:
        containers:
        - image: ${APP_ID}:latest
          imagePullPolicy: Always
          name: ${APP_ID}
          ports:
          - containerPort: 8080
            protocol: TCP
          env:
          - name: DATA_DB_SERVICE_HOST
            value: ${APP_ID}-${PG_DATA_DB}-db-service
          - name: DATA_DB_SERVICE_PORT
            value: '5432'
          - name: DATA_DB_USERNAME
            valueFrom:
              secretKeyRef:
                key: postgresql-user
                name: ${APP_ID}-${PG_DATA_DB}-db-secret
          - name: DATA_DB_PASSWORD
            valueFrom:
              secretKeyRef:
                key: postgresql-password
                name: ${APP_ID}-${PG_DATA_DB}-db-secret
          - name: DATA_DB_NAME
            value: ${PG_DATA_DB}
          - name: DATA_DB_MAX_TOTAL
            value: '250'
          - name: DATA_DB_MAX_IDLE
            value: '20'
          - name: DATA_DB_MAX_WAIT
            value: '30000'
          - name: LOB_DB_SERVICE_HOST
            value: ${APP_ID}-${PG_LOB_DB}-db-service
          - name: LOB_DB_SERVICE_PORT
            value: '5432'
          - name: LOB_DB_USERNAME
            valueFrom:
              secretKeyRef:
                key: postgresql-user
                name: ${APP_ID}-${PG_LOB_DB}-db-secret
          - name: LOB_DB_PASSWORD
            valueFrom:
              secretKeyRef:
                key: postgresql-password
                name: ${APP_ID}-${PG_LOB_DB}-db-secret
          - name: LOB_DB_NAME
            value: ${PG_LOB_DB}
          - name: LOB_DB_MAX_TOTAL
            value: '250'
          - name: LOB_DB_MAX_IDLE
            value: '20'
          - name: LOB_DB_MAX_WAIT
            value: '30000'
          resources: {}
          terminationMessagePath: /dev/termination-log
          livenessProbe:
            httpGet:
              path: /
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 10
            timeoutSeconds: 2
            periodSeconds: 10
            successThreshold: 1
            failureThreshold: 3
          readinessProbe:
            httpGet:
              path: /
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 30
            timeoutSeconds: 2
            periodSeconds: 10
            successThreshold: 1
            failureThreshold: 3
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        securityContext: {}
        terminationGracePeriodSeconds: 30
    test: false
    triggers:
    - type: ConfigChange
    - imageChangeParams:
        automatic: true
        containerNames:
        - ${APP_ID}
        from:
          kind: ImageStreamTag
          name: ${APP_ID}:latest
      type: ImageChange
  status: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      openshift.io/generated-by: OpenShiftNewApp
    labels:
      app: ${APP_ID}
    name: ${APP_ID}
  spec:
    ports:
    - name: 8080-tcp
      port: 8080
      protocol: TCP
      targetPort: 8080
    selector:
      app: ${APP_ID}
      deploymentconfig: ${APP_ID}
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Route
  metadata:
    name: ${APP_ID}
    labels:
      app: ${APP_ID}
  spec:
    to:
      kind: Service
      name: ${APP_ID}
      weight: 100
    port:
      targetPort: 8080-tcp
    wildcardPolicy: None
parameters:
- name: APP_ID
  description: The name assigned to all of the application objects defined in this template, must be lowercase, no special characters.
  displayName: Application Identifier
  required: true
  value: jdbcquery
- name: PG_LOB_DB
  description: Name of the large object database
  value: lob
- name: PG_DATA_DB
  description: Name of the relational database
  value: data
- name: GIT_SOURCE_REF
  description: The source Ref for the application
  displayName: Source Ref
  required: true
  value: master
- name: GIT_SOURCE_URL
  description: The source URL for the application
  displayName: Source URL
  required: true
  value: https://github.com/morbrian/sandbox-jdbc-query.git
- name: ARTIFACT_NAME
  description: The name of war artifact.
  value: jdbc-query
- description: Github trigger secret.  A difficult to guess string encoded as part of the webhook URL.  Not encrypted.
  displayName: GitHub Webhook Secret
  from: '[a-zA-Z0-9]{40}'
  generate: expression
  name: GITHUB_WEBHOOK_SECRET
  required: true
- description: A secret string used to configure the Generic webhook.
  displayName: Generic Webhook Secret
  from: '[a-zA-Z0-9]{40}'
  generate: expression
  name: GENERIC_WEBHOOK_SECRET
  required: true
